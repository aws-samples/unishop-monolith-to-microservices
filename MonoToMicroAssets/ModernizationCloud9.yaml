AWSTemplateFormatVersion: 2010-09-09
Description: Cloud9 stack for the Modernization workshop
Parameters:
  ModernizationC9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
  ModernizationC9InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 15
  MonolithRepository:
    Type: String
    Default: https://github.com/aws-samples/unishop-monolith-to-microservices.git # WARNING, currently hard coded below
    Description: The repo to clone for the Monolith Legacy Application
  MonolithBranch:
    Type: String
    Default: main # WARNING, currently hard coded below
    Description: The repo branch to use for the Monolith Legacy Application
  BootstrapFunctionName:
    Type: String
    Default: ModernizationC9BootstrapInstance
    Description: The name of the Lambda function used to bootstrap Cloud9

Resources:
    # Cloud9 setup based on https://github.com/aws-samples/aws-cloud9-bootstrapping-example
    ################## PERMISSIONS AND ROLES #################
    ModernizationC9Role:
      Type: AWS::IAM::Role
      Properties:
        Tags:
          - Key: Environment
            Value: AWS Example
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
                  - ssm.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Path: "/"

    ModernizationC9LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName:
              Fn::Join:
                - ''
                - - ModernizationC9LambdaPolicy-
                  - Ref: AWS::Region
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - cloudformation:DescribeStacks
                    - cloudformation:DescribeStackEvents
                    - cloudformation:DescribeStackResource
                    - cloudformation:DescribeStackResources
                    - ec2:DescribeInstances
                    - ec2:AssociateIamInstanceProfile
                    - ec2:ModifyInstanceAttribute
                    - ec2:ReplaceIamInstanceProfileAssociation
                    - iam:ListInstanceProfiles
                    - iam:PassRole
                  Resource: "*"

    ################## LAMBDA BOOTSTRAP FUNCTION ################

    ModernizationC9BootstrapInstanceLambda:
      Type: Custom::ModernizationC9BootstrapInstanceLambda
      DependsOn:
        - ModernizationC9BootstrapInstanceLambdaFunction
        - ModernizationC9Instance
        - ModernizationC9InstanceProfile
        - ModernizationC9LambdaExecutionRole
      Properties:
        Tags:
          - Key: Environment
            Value: AWS Example
        ServiceToken:
          Fn::GetAtt:
            - ModernizationC9BootstrapInstanceLambdaFunction
            - Arn
        REGION:
          Ref: AWS::Region
        StackName:
          Ref: AWS::StackName
        EnvironmentId:
          Ref: ModernizationC9Instance
        LabIdeInstanceProfileName:
          Ref: ModernizationC9InstanceProfile
        LabIdeInstanceProfileArn:
          Fn::GetAtt:
            - ModernizationC9InstanceProfile
            - Arn

    ModernizationC9BootstrapInstanceLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Ref BootstrapFunctionName
        Tags:
          - Key: Environment
            Value: AWS Example
        Handler: index.lambda_handler
        Role:
          Fn::GetAtt:
            - ModernizationC9LambdaExecutionRole
            - Arn
        Runtime: python3.9
        MemorySize: 256
        Timeout: '600'
        Code:
          ZipFile: |
            from __future__ import print_function
            import boto3
            import json
            import os
            import time
            import traceback
            import cfnresponse
            
            def lambda_handler(event, context):
                # logger.info('event: {}'.format(event))
                # logger.info('context: {}'.format(context))
                responseData = {}
            
                status = cfnresponse.SUCCESS
            
                if event['RequestType'] == 'Create':
                    try:
                        # Open AWS clients
                        ec2 = boto3.client('ec2')
            
                        # Get the InstanceId of the Cloud9 IDE
                        instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                        # logger.info('instance: {}'.format(instance))
            
                        # Create the IamInstanceProfile request object
                        iam_instance_profile = {
                            'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                            'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                        }
                        # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
            
                        # Wait for Instance to become ready before adding Role
                        instance_state = instance['State']['Name']
                        # logger.info('instance_state: {}'.format(instance_state))
                        while instance_state != 'running':
                            time.sleep(5)
                            instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                            # logger.info('instance_state: {}'.format(instance_state))
            
                        # activate termination protection to avoid participants shut down the environment
                        ec2.modify_instance_attribute(InstanceId=instance['InstanceId'],Attribute="disableApiTermination",Value='True')
            
                        # attach instance profile
                        response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                        # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                        r_ec2 = boto3.resource('ec2')
            
                        responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
            
                    except Exception as e:
                        status = cfnresponse.FAILED
                        print(traceback.format_exc())
                        responseData = {'Error': traceback.format_exc(e)}
                    finally:
                        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
    ################## SSM BOOTSRAP HANDLER ###############
    ModernizationC9OutputBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete

    ModernizationC9SSMDocument:
      Type: AWS::SSM::Document
      Properties:
        Tags:
          - Key: Environment
            Value: AWS Example
        DocumentType: Command
        Content:
          schemaVersion: '2.2'
          description: Bootstrap Cloud9 Instance
          mainSteps:
            - action: aws:runShellScript
              name: ModernizationC9bootstrap
              inputs:
                runCommand:
                  - "#!/bin/bash"
                  - date
                  - echo LANG=en_US.utf-8 >> /etc/environment
                  - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                  - . /home/ec2-user/.bashrc
                  - yum -y remove aws-cli; yum -y install sqlite telnet jq strace tree gcc glibc-static python3 python3-pip gettext bash-completion
                  - echo '=== CONFIGURE default python version ==='
                  - PATH=$PATH:/usr/bin
                  - alternatives --set python /usr/bin/python3
                  - echo '=== Clone Git repository ==='
                  # FIX replacement, hardcoding for now                - sudo -H -u ec2-user bash -c "git clone --single-branch --branch ${MonolithBranch} ${MonolithRepository} /home/ec2-user/environment/unishop/"
                  - sudo -H -u ec2-user bash -c "git clone --single-branch --branch main https://github.com/aws-samples/unishop-monolith-to-microservices.git /home/ec2-user/environment/unishop/"
                  - echo '=== INSTALL and CONFIGURE default software components ==='
                  - sudo -H -u ec2-user bash -c "pip install --user -U boto boto3 botocore awscli"
                  - echo '=== Resizing the Instance volume'
                  - !Sub SIZE=${ModernizationC9InstanceVolumeSize}
                  - !Sub REGION=${AWS::Region}
                  - |
                    INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    VOLUMEID=$(aws ec2 describe-instances \
                      --instance-id $INSTANCEID \
                      --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
                      --output text --region $REGION)
                    aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE --region $REGION
                    while [ \
                      "$(aws ec2 describe-volumes-modifications \
                        --volume-id $VOLUMEID \
                        --filters Name=modification-state,Values="optimizing","completed" \
                        --query "length(VolumesModifications)"\
                        --output text --region $REGION)" != "1" ]; do
                    sleep 1
                    done
                    if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
                    then
                      sudo growpart /dev/xvda 1
                      STR=$(cat /etc/os-release)
                      SUB="VERSION_ID=\"2\""
                      if [[ "$STR" == *"$SUB"* ]]
                      then
                        sudo xfs_growfs -d /
                      else
                        sudo resize2fs /dev/xvda1
                      fi
                    else
                      sudo growpart /dev/nvme0n1 1
                      STR=$(cat /etc/os-release)
                      SUB="VERSION_ID=\"2\""
                      if [[ "$STR" == *"$SUB"* ]]
                      then
                        sudo xfs_growfs -d /
                      else
                        sudo resize2fs /dev/nvme0n1p1
                      fi
                    fi
                  - !Sub BOOTSTRAP_FUNCTION_NAME=${BootstrapFunctionName}
                  # remove bootstrap function to not confuse participants (to be improved as it's part of the CF stack)
                  - aws lambda delete-function --function-name $BOOTSTRAP_FUNCTION_NAME --region $REGION
                  - mkdir /home/ec2-user/.aws
                  - echo '[default]' > /home/ec2-user/.aws/config
                  - echo 'output = json' >> /home/ec2-user/.aws/config
                  - chmod 600 /home/ec2-user/.aws/config && chmod 600 /home/ec2-user/.aws/credentials
                  - echo 'PATH=$PATH:/usr/local/bin' >> /home/ec2-user/.bashrc
                  - echo 'export PATH' >> /home/ec2-user/.bashrc
                  - echo '=== CLEANING /home/ec2-user ==='
                  - for f in cloud9; do rm -rf /home/ec2-user/$f; done
                  - chown -R ec2-user:ec2-user /home/ec2-user/
                  - echo '=== PREPARE REBOOT in 1 minute with at ==='
                  - FILE=$(mktemp) && echo $FILE && echo '#!/bin/bash' > $FILE && echo 'reboot -f --verbose' >> $FILE && at now + 1 minute -f $FILE
                  - echo "Bootstrap completed with return code $?"

    ModernizationC9BootstrapAssociation:
      Type: AWS::SSM::Association
      DependsOn: ModernizationC9OutputBucket
      Properties:
        Name: !Ref ModernizationC9SSMDocument
        OutputLocation:
          S3Location:
            OutputS3BucketName: !Ref ModernizationC9OutputBucket
            OutputS3KeyPrefix: bootstrapoutput
        Targets:
          - Key: tag:SSMBootstrap
            Values:
              - Active

    ################## INSTANCE #####################
    ModernizationC9InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - Ref: ModernizationC9Role

    ModernizationC9Instance:
      DependsOn: ModernizationC9BootstrapAssociation
      Type: AWS::Cloud9::EnvironmentEC2
      Properties:
        Description: AWS Cloud9 instance for the Modernization workshop
        AutomaticStopTimeMinutes: 3600
        ImageId: amazonlinux-2023-x86_64
        InstanceType:
          Ref: ModernizationC9InstanceType
        Name:
          Ref: AWS::StackName
        OwnerArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref "AWS::AccountId"
            - ':assumed-role/WSParticipantRole/Participant'
        Tags:
          - Key: SSMBootstrap
            Value: Active
          - Key: Environment
            Value: AWS Example
